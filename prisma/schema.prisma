generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_PRISMA_URL")
}

model User {
  id                String        @id @default(cuid())
  fullName          String
  email             String        @unique
  password          String
  role              Role          @default(Basic)
  totalCreditsUsed  Int           @default(0)
  maxMonthlyCredits Int           @default(0)
  max_download      Int           @default(0)
  totalDownloads    Int           @default(0)
  stripeCustomerId  String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  credits           Int           @default(50)
  isVerified        Boolean       @default(false)
  isSuspended       Boolean       @default(false)
  lastLoginAt       DateTime?
  creditLogs        CreditLog[]
  Gallery           Gallery[]
  payments          Payment[]
  generatedSongs    Song[]
  subscription      Subscription?
  verification      Verification?
  videoLinks        videoLinks[]
  sentNewsletters   NewsletterLog[] @relation("SentBy")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeSubscriptionId String
  stripePriceId        String
  planName             String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String
  amount          Float
  currency        String   @default("USD")
  status          String
  paymentMethod   String?
  description     String?
  metadata        Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditLog {
  id                String   @id @default(cuid())
  userId            String
  amount            Int
  balanceAfter      Int
  description       String
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Song {
  id               String    @id @default(cuid())
  userId           String
  title            String
  prompt           String
  lyrics           String?
  audioUrl         String
  videoUrl         String?
  thumbnailUrl     String?
  duration         Int
  creditsUsed      Int
  isPublic         Boolean   @default(false)
  tags             String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  alternativeSongs Json?
  completedAt      DateTime?
  generationId     String?
  generationTime   Int?
  mood             String?
  provider         String?
  startedAt        DateTime?
  style            String?
  taskId           String?
  tempo            String?
  quality          String?   @default("pending") // Can be 'pending', 'approved', 'flagged'
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gallery {
  id        String @id @default(cuid())
  userId    String
  audioLink String
  isPaid    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model videoLinks {
  id            String  @id @default(cuid())
  userId        String
  isLive        Boolean @default(true)
  videoLink     String  @unique
  title         String
  thumbnailLink String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Thumbnail {
  id             Int    @id @default(autoincrement())
  ThumbnailImage String
}

model PricingPlan {
  id            String   @id @default(cuid())
  stripePriceId String   @unique
  name          String
  description   String
  priceMonthly  Float
  credits       Int
  maxDownloads  Int
  features      String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Verification {
  id          String           @id @default(cuid())
  userId      String           @unique
  code        String
  token       String?          // Token for email links
  type        VerificationType
  expiresAt   DateTime
  isUsed      Boolean          @default(false)
  redirectUrl String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Admin
  Premium
  Pro
  Starter
  Basic
}

enum SubscriptionStatus {
  Active
  Canceled
  Expired
  Paused
  Trialing
}

enum VerificationType {
  SIGNUP
  PASSWORD_RESET
}

model NewsletterLog {
  id             String   @id @default(cuid())
  subject        String
  content        String   @db.Text
  userGroup      String
  sentBy         User     @relation("SentBy", fields: [sentById], references: [id])
  sentById       String
  recipientCount Int
  failureCount   Int      @default(0)
  createdAt      DateTime @default(now())
}
